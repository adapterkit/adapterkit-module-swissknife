// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: swissknife.proto

package swissknife

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwissknifeSvcClient is the client API for SwissknifeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwissknifeSvcClient interface {
	ConvHexa(ctx context.Context, in *ConvHexa_Request, opts ...grpc.CallOption) (*ConvHexa_Response, error)
	ConvBase64(ctx context.Context, in *ConvBase64_Request, opts ...grpc.CallOption) (*ConvBase64_Response, error)
}

type swissknifeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSwissknifeSvcClient(cc grpc.ClientConnInterface) SwissknifeSvcClient {
	return &swissknifeSvcClient{cc}
}

func (c *swissknifeSvcClient) ConvHexa(ctx context.Context, in *ConvHexa_Request, opts ...grpc.CallOption) (*ConvHexa_Response, error) {
	out := new(ConvHexa_Response)
	err := c.cc.Invoke(ctx, "/pmg_tools.adapterkit_module_swissknife.SwissknifeSvc/ConvHexa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissknifeSvcClient) ConvBase64(ctx context.Context, in *ConvBase64_Request, opts ...grpc.CallOption) (*ConvBase64_Response, error) {
	out := new(ConvBase64_Response)
	err := c.cc.Invoke(ctx, "/pmg_tools.adapterkit_module_swissknife.SwissknifeSvc/ConvBase64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwissknifeSvcServer is the server API for SwissknifeSvc service.
// All implementations must embed UnimplementedSwissknifeSvcServer
// for forward compatibility
type SwissknifeSvcServer interface {
	ConvHexa(context.Context, *ConvHexa_Request) (*ConvHexa_Response, error)
	ConvBase64(context.Context, *ConvBase64_Request) (*ConvBase64_Response, error)
	mustEmbedUnimplementedSwissknifeSvcServer()
}

// UnimplementedSwissknifeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSwissknifeSvcServer struct {
}

func (UnimplementedSwissknifeSvcServer) ConvHexa(context.Context, *ConvHexa_Request) (*ConvHexa_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvHexa not implemented")
}
func (UnimplementedSwissknifeSvcServer) ConvBase64(context.Context, *ConvBase64_Request) (*ConvBase64_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvBase64 not implemented")
}
func (UnimplementedSwissknifeSvcServer) mustEmbedUnimplementedSwissknifeSvcServer() {}

// UnsafeSwissknifeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwissknifeSvcServer will
// result in compilation errors.
type UnsafeSwissknifeSvcServer interface {
	mustEmbedUnimplementedSwissknifeSvcServer()
}

func RegisterSwissknifeSvcServer(s grpc.ServiceRegistrar, srv SwissknifeSvcServer) {
	s.RegisterService(&SwissknifeSvc_ServiceDesc, srv)
}

func _SwissknifeSvc_ConvHexa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvHexa_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissknifeSvcServer).ConvHexa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmg_tools.adapterkit_module_swissknife.SwissknifeSvc/ConvHexa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissknifeSvcServer).ConvHexa(ctx, req.(*ConvHexa_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissknifeSvc_ConvBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvBase64_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissknifeSvcServer).ConvBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmg_tools.adapterkit_module_swissknife.SwissknifeSvc/ConvBase64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissknifeSvcServer).ConvBase64(ctx, req.(*ConvBase64_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SwissknifeSvc_ServiceDesc is the grpc.ServiceDesc for SwissknifeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwissknifeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmg_tools.adapterkit_module_swissknife.SwissknifeSvc",
	HandlerType: (*SwissknifeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvHexa",
			Handler:    _SwissknifeSvc_ConvHexa_Handler,
		},
		{
			MethodName: "ConvBase64",
			Handler:    _SwissknifeSvc_ConvBase64_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swissknife.proto",
}
